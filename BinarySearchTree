#include <iostream>

using namespace std;

class Node{
    public:
    int data;
    Node *left;
    Node *right;
    
    Node(int val)
    {
        data=val;
        left=NULL;
        right=NULL;
    }
    
   
    
};
 Node* insert(Node *root, int val)
    {
        if(root==NULL)
        {
            return new Node(val);
        }
        
        if(val<root->data)
        {
            root->left=insert(root->left, val);
        }
        else{
            root->right=insert(root->right,val);
        }
        
        return root;
        
    }

    void inorder(Node *root)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left);
        cout<<root->data<<" ";
        inorder(root->right);
    }
    
     Node* inorderSuc(Node *root)
    {
        Node* curr = root;
        while(curr && curr->left!=NULL)
        {
            curr=curr->left;
        }
        return curr;
    }
    
    Node* search(Node *root, int val)
    {
        if(root==NULL || root->data==val)
        {
            return root;
        }
        if(val>root->data)
        {
            return search(root->right,val);
        }
        return search(root->left,val);
    }
    
    Node* deleteBST(Node *root , int val)
    {
        if(val>root->data)
        {
            root->right=deleteBST(root->right,val);
        }
        else if(val<root->data)
        {
            root->left=deleteBST(root->left,val);
        }
        else{
            if(root->left==NULL)
            {
                Node* temp=root->right;
                free(root);
                return temp;
            }
            if(root->right==NULL)
            {
                Node* temp = root->left;
                free(root);
                return temp;
            }
                Node* temp =inorderSuc(root->right);
                root->data = temp->data;
                root->right=deleteBST(root->right,temp->data);
                
        }
        return root;
    }
   

int main()
{
    Node* root = new Node(4);
    insert(root,5);
    insert(root,3);
    insert(root,2);
    insert(root,9);
    insert(root,7);insert(root,0);insert(root,11);insert(root,12);
    inorder(root);
    cout<<endl;
    cout<<"Searched element key ";
    if(search(root,7)){
        cout<<"Element Found"<<endl;
    };
    root=deleteBST(root,7);
    
    cout<<"After deleting 7"<<endl;
    inorder(root);
    

    return 0;
}
